{"version":3,"sources":["covid.png","components/Tracker/TrackerCard.js","components/Tracker/Tracker.js","components/CountryTracker/CountryTracker.js","App.js","index.js"],"names":["module","exports","TrackerCard","props","Card","style","padding","CardContent","Typography","color","gutterBottom","title","variant","component","end","value","duration","separator","Date","toDateString","Tracker","margin","align","Grid","container","spacing","justify","item","xs","md","confirmed","recovered","deaths","CountryTracker","useState","country","setCountry","covidData","setCovidData","handleSelect","e","a","countries","target","fetch","process","Slug","confirmedRes","json","confirmedData","recoveredRes","recoveredData","deathRes","deathData","labels","map","d","datasets","label","data","Cases","backgroundColor","window","scrollTo","top","document","body","scrollHeight","behavior","useEffect","slug","_country","filter","c","loadInitialCountry","FormControl","fullWidth","InputLabel","id","Select","labelId","onChange","autoWidth","ind","MenuItem","key","Country","Object","keys","length","TotalConfirmed","TotalRecovered","TotalDeaths","options","zoom","enabled","mode","speed","pan","className","App","globalData","setGlobalData","setCountries","isLoaded","setIsLoaded","res","Global","Countries","fetchData","Container","src","require","alt","marginTop","Box","display","loaded","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e7267637.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/covid.d7265326.png\";","import React from 'react';\nimport { Card, CardContent, Typography } from '@material-ui/core';\nimport CountUp from 'react-countup';\n\nfunction TrackerCard(props) {\n    return (\n        <Card style={{ padding: \"20px\" }}>\n            <CardContent>\n                <Typography color=\"textSecondary\" gutterBottom>\n                    {props.title}\n                </Typography>\n                <Typography variant=\"h5\" component=\"h2\">\n                    <CountUp end={props.value ?? 0} duration={1.2} separator=\",\" />\n                </Typography>\n                <Typography color=\"textSecondary\">\n                    {new Date().toDateString()}\n                </Typography>\n            </CardContent>\n        </Card>\n    );\n}\n\nexport default TrackerCard;","import React from 'react';\nimport { Grid, Typography } from '@material-ui/core';\nimport TrackerCard from './TrackerCard';\n\nfunction Tracker(props) {\n    return (\n        <div style={{ margin: \"20px 0\" }}>\n            <Typography variant=\"h5\" component=\"h4\" align=\"center\">{props.title}</Typography>\n            <br />\n            <Grid container spacing={3} justify=\"center\">\n                <Grid item xs={10} md={4}>\n                    <TrackerCard title=\"Confirmed\" value={props.confirmed} />\n                </Grid>\n                <Grid item xs={10} md={4}>\n                    <TrackerCard title=\"Recovered\" value={props.recovered} />\n                </Grid>\n                <Grid item xs={10} md={4}>\n                    <TrackerCard title=\"Deaths\" value={props.deaths} />\n                </Grid>\n            </Grid>\n        </div>\n    );\n}\n\nexport default Tracker;","import React, { useState, useEffect } from 'react';\nimport { FormControl, InputLabel, MenuItem, Select } from '@material-ui/core';\nimport Tracker from '../Tracker/Tracker';\nimport { Line } from 'react-chartjs-2';\nimport * as zoom from 'chartjs-plugin-zoom';\n\nfunction CountryTracker(props) {\n    const [country, setCountry] = useState({});\n\n    const [covidData, setCovidData] = useState({});\n\n    const handleSelect = async (e) => {\n        setCountry(props.countries[e.target.value]);\n\n        // confirmed cases\n        const confirmedRes = await fetch(`${process.env.REACT_APP_API}/dayone/country/${props.countries[e.target.value].Slug}/status/confirmed`);\n        const confirmedData = await confirmedRes.json();\n\n        // recovered cases\n        const recoveredRes = await fetch(`${process.env.REACT_APP_API}/dayone/country/${props.countries[e.target.value].Slug}/status/recovered`);\n        const recoveredData = await recoveredRes.json();\n\n        // death cases\n        const deathRes = await fetch(`${process.env.REACT_APP_API}/dayone/country/${props.countries[e.target.value].Slug}/status/deaths`);\n        const deathData = await deathRes.json();\n\n        let labels = confirmedData.map(d => {\n            return new Date(d.Date).toDateString();\n        });\n\n        setCovidData({\n            labels: labels,\n            datasets: [\n                {\n                    label: \"Deaths\",\n                    data: deathData.map(d => d.Cases),\n                    backgroundColor: 'rgba(230, 57, 70, 1)'\n                },\n                {\n                    label: \"Recovered\",\n                    data: recoveredData.map(d => d.Cases),\n                    backgroundColor: 'rgba(69, 123, 157, 1)'\n                },\n\n                {\n                    label: \"Confirmed\",\n                    data: confirmedData.map(d => d.Cases),\n                    backgroundColor: 'rgba(168, 218, 220, 1)'\n\n                }\n            ]\n        });\n\n        window.scrollTo({ top: document.body.scrollHeight, behavior: 'smooth' });\n    }\n\n    useEffect(() => {\n\n        async function loadInitialCountry() {\n\n            let slug = \"india\";\n            let _country = (props.countries.filter(c => c.Slug === slug))[0];\n\n            setCountry(_country);\n            // confirmed cases\n            const confirmedRes = await fetch(`${process.env.REACT_APP_API}/dayone/country/${slug}/status/confirmed`);\n            const confirmedData = await confirmedRes.json();\n\n            // recovered cases\n            const recoveredRes = await fetch(`${process.env.REACT_APP_API}/dayone/country/${slug}/status/recovered`);\n            const recoveredData = await recoveredRes.json();\n\n            // death cases\n            const deathRes = await fetch(`${process.env.REACT_APP_API}/dayone/country/${slug}/status/deaths`);\n            const deathData = await deathRes.json();\n\n            let labels = confirmedData.map(d => {\n                return new Date(d.Date).toDateString();\n            });\n\n            setCovidData({\n                labels: labels,\n                datasets: [\n                    {\n                        label: \"Deaths\",\n                        data: deathData.map(d => d.Cases),\n                        backgroundColor: 'rgba(230, 57, 70, 1)'\n                    },\n                    {\n                        label: \"Recovered\",\n                        data: recoveredData.map(d => d.Cases),\n                        backgroundColor: 'rgba(69, 123, 157, 1)'\n                    },\n\n                    {\n                        label: \"Confirmed\",\n                        data: confirmedData.map(d => d.Cases),\n                        backgroundColor: 'rgba(168, 218, 220, 1)'\n\n                    }\n                ]\n            });\n\n        }\n\n        loadInitialCountry();\n\n    }, [props.countries])\n\n    const zoomOptions = {\n        zoom: {\n            enabled: true,\n            mode: 'x',\n            speed: 100000000000\n        },\n        pan: {\n            enabled: true,\n            mode: 'x',\n            speed: 10\n        }\n    }\n    return (\n        <div>\n            <FormControl fullWidth>\n                <InputLabel id=\"country-label\">Select Country</InputLabel>\n                <Select labelId=\"country-label\" onChange={handleSelect} autoWidth>\n                    {props.countries.map((c, ind) => <MenuItem key={ind} value={ind}>{c.Country}</MenuItem>)}\n                </Select>\n            </FormControl>\n\n            {Object.keys(country).length ? <Tracker confirmed={country.TotalConfirmed} recovered={country.TotalRecovered} deaths={country.TotalDeaths} title={country.Country} /> : null}\n\n            {Object.keys(covidData).length ? <Line data={covidData ?? []} options={zoomOptions} className=\"covid-chart\" /> : null}\n        </div>\n    );\n}\n\nexport default CountryTracker;","import React, { useEffect, useState } from 'react';\nimport { Container, Grid, Typography, Box } from '@material-ui/core';\nimport Tracker from './components/Tracker/Tracker';\nimport CountryTracker from './components/CountryTracker/CountryTracker';\nimport Loader from 'react-loader';\nfunction App() {\n  const [globalData, setGlobalData] = useState({});\n  const [countries, setCountries] = useState([]);\n  const [isLoaded, setIsLoaded] = useState(true);\n\n  useEffect(() => {\n    async function fetchData() {\n      setIsLoaded(false);\n      const res = await fetch(`${process.env.REACT_APP_API}/summary`);\n      const { Global, Countries } = await res.json();\n      setGlobalData(Global);\n      setCountries(Countries);\n      setIsLoaded(true);\n    }\n\n    fetchData();\n  }, []);\n\n\n  return (\n    <Container className=\"App\">\n      <Grid container justify=\"center\">\n        <img src={require(\"../src/covid.png\")} alt=\"covid header\" className=\"header-img\" align=\"center\" style={{ marginTop: \"20px\" }} />\n      </Grid>\n      <Box display={{ xs: \"block\", md: \"none\" }}>\n        <Typography color=\"textSecondary\" align=\"center\" >For smaller screens use landscape mode or enabling Desktop site feature is recommended.</Typography>\n      </Box>\n      <Tracker confirmed={globalData.TotalConfirmed} recovered={globalData.TotalRecovered} deaths={globalData.TotalDeaths} title=\"Global Stats\" />\n      <Loader loaded={isLoaded}>\n        <CountryTracker countries={countries} />\n      </Loader>\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}